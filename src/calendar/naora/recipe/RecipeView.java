/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calendar.naora.recipe;

import calendar.naora.dnd.RecipeTransferHandler;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

/**
 *
 * @author Nao
 */
public class RecipeView extends javax.swing.JPanel {

    // <editor-fold defaultstate="collapsed" desc="CellRenderer for recipe list">   
    private class RecipeCellRenderer extends JLabel implements ListCellRenderer<Recipe> {

        private final Border noFocusBorder;
        private final Border defaultBorder;

        public RecipeCellRenderer() {
            super();
            defaultBorder = new EmptyBorder(1, 1, 1, 1);
            noFocusBorder = new EmptyBorder(1, 1, 1, 1);

            init();
        }

        private void init() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends Recipe> list, Recipe value, int index, boolean isSelected, boolean cellHasFocus) {
            setText(value.getName());

            setComponentOrientation(list.getComponentOrientation());

            Color bg = null;
            Color fg = null;

            JList.DropLocation dropLocation = list.getDropLocation();
            if (dropLocation != null
                    && !dropLocation.isInsert()
                    && dropLocation.getIndex() == index) {

                bg = UIManager.getColor("List.dropCellBackground");
                fg = UIManager.getColor("List.dropCellForeground");

                isSelected = true;
            }

            if (isSelected) {
                setBackground(bg == null ? list.getSelectionBackground() : bg);
                setForeground(fg == null ? list.getSelectionForeground() : fg);
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            setEnabled(list.isEnabled());
            setFont(list.getFont());

            Border border = null;
            if (cellHasFocus) {
                if (isSelected) {
                    border = UIManager.getBorder("List.focusSelectedCellHighlightBorder");
                }
                if (border == null) {
                    border = UIManager.getBorder("List.focusCellHighlightBorder");
                }
            } else {
                border = getNoFocusBorder();
            }
            setBorder(border);

            return this;
        }

        private Border getNoFocusBorder() {
            Border border = UIManager.getBorder("List.cellNoFocusBorder");
            if (System.getSecurityManager() != null) {
                if (border != null) {
                    return border;
                }
                return noFocusBorder;
            } else {
                if (border != null
                        && (noFocusBorder == null
                        || noFocusBorder == defaultBorder)) {
                    return border;
                }
                return noFocusBorder;
            }
        }
    }// </editor-fold>

    private RecipeModel recipeModel;

    public RecipeView() {
        this(new RecipeModel());
    }

    /**
     * Creates new form RecipeView
     * @param r
     */
    public RecipeView(RecipeModel r) {
        recipeModel = r;
        initComponents();
        
        recipes.setTransferHandler(new RecipeTransferHandler());
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        recipes = new javax.swing.JList<>();
        delete = new javax.swing.JButton();
        add = new javax.swing.JButton();
        search = new javax.swing.JTextField();
        filterChoice = new javax.swing.JComboBox<>();

        setMinimumSize(new java.awt.Dimension(250, 200));

        jScrollPane2.setMinimumSize(new java.awt.Dimension(200, 200));

        recipes.setModel(recipeModel);
        recipes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        recipes.setCellRenderer(new RecipeCellRenderer());
        recipes.setDragEnabled(true);
        recipes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recipesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(recipes);

        delete.setText("Supprimer");
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMouseClicked(evt);
            }
        });

        add.setText("Ajouter");
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMouseClicked(evt);
            }
        });

        search.setToolTipText("Recherche");
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        filterChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nom", "Tag" }));
        filterChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterChoiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(add)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete)
                    .addComponent(add))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseClicked
        String name = JOptionPane.showInputDialog(this, "Nom de la recette :", "Ajouter", JOptionPane.QUESTION_MESSAGE);
        if (!name.isEmpty()) {
            Recipe r = new Recipe(name);
            recipeModel.add(r);
        }
    }//GEN-LAST:event_addMouseClicked

    private void deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseClicked
        int i = recipes.getSelectedIndex();
        if (i != -1) {
            Recipe e = recipeModel.getElementAt(i);
            int option = JOptionPane.showConfirmDialog(this, "Etes vous sur de vouloir supprimer la recette de " + e.getName(), "Supprimer", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                recipeModel.delete(recipes.getSelectedIndex());
            }
        }
    }//GEN-LAST:event_deleteMouseClicked

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        recipeModel.setFilter(search.getText(), filterChoice.getSelectedIndex() );
    }//GEN-LAST:event_searchKeyReleased

    private void filterChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterChoiceActionPerformed
        if( "comboBoxChanged".equals(evt.getActionCommand()) ){
            recipeModel.setFilter(search.getText(), filterChoice.getSelectedIndex() );
        }
    }//GEN-LAST:event_filterChoiceActionPerformed

    private void recipesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recipesMouseClicked
        if(evt.getClickCount() == 2) {
            RecipeDialog dialog = new RecipeDialog(null, true, recipes.getSelectedValue());
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_recipesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton delete;
    private javax.swing.JComboBox<String> filterChoice;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Recipe> recipes;
    private javax.swing.JTextField search;
    // End of variables declaration//GEN-END:variables
}
